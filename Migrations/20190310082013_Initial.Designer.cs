// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MoviesApp.Models;

namespace MoviesApp.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20190310082013_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MoviesApp.Models.Favorite", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("FilmId");

                    b.HasKey("UserId", "FilmId");

                    b.HasIndex("FilmId");

                    b.ToTable("Favorite");
                });

            modelBuilder.Entity("MoviesApp.Models.Film", b =>
                {
                    b.Property<int>("FilmId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2048);

                    b.Property<int>("Genre")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<string>("PosterPath")
                        .IsRequired();

                    b.Property<int>("ReleaseYear");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.HasKey("FilmId");

                    b.ToTable("Films");

                    b.HasData(
                        new
                        {
                            FilmId = 1,
                            Description = "Описание \"Игры престолов\"",
                            Genre = 5,
                            PosterPath = "/img/posters/1.jpeg",
                            ReleaseYear = 2011,
                            Title = "Игра престолов"
                        },
                        new
                        {
                            FilmId = 2,
                            Description = "Описание \"Маски\"",
                            Genre = 3,
                            PosterPath = "/img/posters/2.jpg",
                            ReleaseYear = 1994,
                            Title = "Маска"
                        },
                        new
                        {
                            FilmId = 3,
                            Description = "Описание \"Побега из Шоушенка\"",
                            Genre = 6,
                            PosterPath = "/img/posters/3.jpg",
                            ReleaseYear = 1994,
                            Title = "Побег из Шоушенка"
                        },
                        new
                        {
                            FilmId = 4,
                            Description = "Описание \"Леона\"",
                            Genre = 6,
                            PosterPath = "/img/posters/4.jpg",
                            ReleaseYear = 1994,
                            Title = "Леон"
                        },
                        new
                        {
                            FilmId = 5,
                            Description = "Описание \"Шерлока\"",
                            Genre = 7,
                            PosterPath = "/img/posters/5.jpg",
                            ReleaseYear = 2010,
                            Title = "Шерлок"
                        },
                        new
                        {
                            FilmId = 6,
                            Description = "Описание \"1+1\"",
                            Genre = 6,
                            PosterPath = "/img/posters/6.jpg",
                            ReleaseYear = 2011,
                            Title = "1+1"
                        },
                        new
                        {
                            FilmId = 7,
                            Description = "Описание \"Назад в будущее\"",
                            Genre = 8,
                            PosterPath = "/img/posters/7.jpg",
                            ReleaseYear = 1985,
                            Title = "Назад в будущее"
                        });
                });

            modelBuilder.Entity("MoviesApp.Models.FilmActorJoin", b =>
                {
                    b.Property<int>("PersonId");

                    b.Property<int>("FilmId");

                    b.HasKey("PersonId", "FilmId");

                    b.HasIndex("FilmId");

                    b.ToTable("FilmActorJoin");

                    b.HasData(
                        new
                        {
                            PersonId = 2,
                            FilmId = 1
                        },
                        new
                        {
                            PersonId = 3,
                            FilmId = 1
                        },
                        new
                        {
                            PersonId = 5,
                            FilmId = 2
                        },
                        new
                        {
                            PersonId = 6,
                            FilmId = 2
                        },
                        new
                        {
                            PersonId = 8,
                            FilmId = 3
                        },
                        new
                        {
                            PersonId = 9,
                            FilmId = 3
                        },
                        new
                        {
                            PersonId = 11,
                            FilmId = 4
                        },
                        new
                        {
                            PersonId = 12,
                            FilmId = 4
                        },
                        new
                        {
                            PersonId = 14,
                            FilmId = 5
                        },
                        new
                        {
                            PersonId = 15,
                            FilmId = 5
                        },
                        new
                        {
                            PersonId = 17,
                            FilmId = 6
                        },
                        new
                        {
                            PersonId = 18,
                            FilmId = 6
                        },
                        new
                        {
                            PersonId = 20,
                            FilmId = 7
                        },
                        new
                        {
                            PersonId = 21,
                            FilmId = 7
                        });
                });

            modelBuilder.Entity("MoviesApp.Models.FilmDirectorJoin", b =>
                {
                    b.Property<int>("PersonId");

                    b.Property<int>("FilmId");

                    b.HasKey("PersonId", "FilmId");

                    b.HasIndex("FilmId");

                    b.ToTable("FilmDirectorJoin");

                    b.HasData(
                        new
                        {
                            PersonId = 1,
                            FilmId = 1
                        },
                        new
                        {
                            PersonId = 4,
                            FilmId = 2
                        },
                        new
                        {
                            PersonId = 7,
                            FilmId = 3
                        },
                        new
                        {
                            PersonId = 10,
                            FilmId = 4
                        },
                        new
                        {
                            PersonId = 13,
                            FilmId = 5
                        },
                        new
                        {
                            PersonId = 16,
                            FilmId = 6
                        },
                        new
                        {
                            PersonId = 19,
                            FilmId = 7
                        });
                });

            modelBuilder.Entity("MoviesApp.Models.FilmReview", b =>
                {
                    b.Property<int>("FilmReviewId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body");

                    b.Property<int>("FilmId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(2048);

                    b.Property<int>("UserId");

                    b.HasKey("FilmReviewId");

                    b.HasIndex("FilmId");

                    b.HasIndex("UserId");

                    b.ToTable("FilmReviews");
                });

            modelBuilder.Entity("MoviesApp.Models.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.HasKey("PersonId");

                    b.ToTable("Persons");

                    b.HasData(
                        new
                        {
                            PersonId = 1,
                            Name = "Алан Тейлор"
                        },
                        new
                        {
                            PersonId = 2,
                            Name = "Питер Динклейдж"
                        },
                        new
                        {
                            PersonId = 3,
                            Name = "Шон Бин"
                        },
                        new
                        {
                            PersonId = 4,
                            Name = "Чак Рассел"
                        },
                        new
                        {
                            PersonId = 5,
                            Name = "Джим Керри"
                        },
                        new
                        {
                            PersonId = 6,
                            Name = "Питер Ригерт"
                        },
                        new
                        {
                            PersonId = 7,
                            Name = "Фрэнк Дарабонт"
                        },
                        new
                        {
                            PersonId = 8,
                            Name = "Тим Роббинс"
                        },
                        new
                        {
                            PersonId = 9,
                            Name = "Морган Фриман"
                        },
                        new
                        {
                            PersonId = 10,
                            Name = "Люк Бессон"
                        },
                        new
                        {
                            PersonId = 11,
                            Name = "Натали Портман"
                        },
                        new
                        {
                            PersonId = 12,
                            Name = "Жан Рено"
                        },
                        new
                        {
                            PersonId = 13,
                            Name = "Пол Макгиган"
                        },
                        new
                        {
                            PersonId = 14,
                            Name = "Будапешт Киберскотч"
                        },
                        new
                        {
                            PersonId = 15,
                            Name = "Мартин Фримен"
                        },
                        new
                        {
                            PersonId = 16,
                            Name = "Оливье Накаш"
                        },
                        new
                        {
                            PersonId = 17,
                            Name = "Франсуа Клюзе"
                        },
                        new
                        {
                            PersonId = 18,
                            Name = "Омар Си"
                        },
                        new
                        {
                            PersonId = 19,
                            Name = "Роберт Земекис"
                        },
                        new
                        {
                            PersonId = 20,
                            Name = "Майкл Фокс"
                        },
                        new
                        {
                            PersonId = 21,
                            Name = "Кристофер Ллойд"
                        });
                });

            modelBuilder.Entity("MoviesApp.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("MoviesApp.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("MoviesApp.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MoviesApp.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("MoviesApp.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MoviesApp.Models.Favorite", b =>
                {
                    b.HasOne("MoviesApp.Models.Film", "Film")
                        .WithMany()
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MoviesApp.Models.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MoviesApp.Models.FilmActorJoin", b =>
                {
                    b.HasOne("MoviesApp.Models.Film", "Film")
                        .WithMany("FilmActors")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MoviesApp.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MoviesApp.Models.FilmDirectorJoin", b =>
                {
                    b.HasOne("MoviesApp.Models.Film", "Film")
                        .WithMany("FilmDirectors")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MoviesApp.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MoviesApp.Models.FilmReview", b =>
                {
                    b.HasOne("MoviesApp.Models.Film", "Film")
                        .WithMany("FilmReviews")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MoviesApp.Models.User", "User")
                        .WithMany("FilmReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
