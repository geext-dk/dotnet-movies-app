// <auto-generated />
using System;
using DotnetMoviesAppRazor.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DotnetMoviesAppRazor.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("DotnetMoviesAppRazor.Data.Film", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("TEXT");

                    b.Property<int>("Genre")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<string>("PosterPath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Films");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "A description of \"Game of Thrones\"",
                            Genre = 5,
                            PosterPath = "/img/posters/1.jpeg",
                            ReleaseYear = 2011,
                            Title = "Game of Thrones"
                        },
                        new
                        {
                            Id = 2,
                            Description = "A description of \"The Mask\"",
                            Genre = 3,
                            PosterPath = "/img/posters/2.jpg",
                            ReleaseYear = 1994,
                            Title = "The Mask"
                        },
                        new
                        {
                            Id = 3,
                            Description = "A description of \"The Shawshank Redemption\"",
                            Genre = 6,
                            PosterPath = "/img/posters/3.jpg",
                            ReleaseYear = 1994,
                            Title = "The Shawshank Redemption"
                        },
                        new
                        {
                            Id = 4,
                            Description = "A description of \"Léon: The Professional\"",
                            Genre = 6,
                            PosterPath = "/img/posters/4.jpg",
                            ReleaseYear = 1994,
                            Title = "Léon: The Professional"
                        },
                        new
                        {
                            Id = 5,
                            Description = "A description of \"Sherlock\"",
                            Genre = 7,
                            PosterPath = "/img/posters/5.jpg",
                            ReleaseYear = 2010,
                            Title = "Sherlock"
                        },
                        new
                        {
                            Id = 6,
                            Description = "A description of \"Intouchables\"",
                            Genre = 6,
                            PosterPath = "/img/posters/6.jpg",
                            ReleaseYear = 2011,
                            Title = "Intouchables"
                        },
                        new
                        {
                            Id = 7,
                            Description = "A description of \"Back to the Future\"",
                            Genre = 8,
                            PosterPath = "/img/posters/7.jpg",
                            ReleaseYear = 1985,
                            Title = "Back to the Future"
                        });
                });

            modelBuilder.Entity("DotnetMoviesAppRazor.Data.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.HasKey("PersonId");

                    b.ToTable("Persons");

                    b.HasData(
                        new
                        {
                            PersonId = 1,
                            Name = "Alan Taylor"
                        },
                        new
                        {
                            PersonId = 2,
                            Name = "Peter Hayden Dinklage"
                        },
                        new
                        {
                            PersonId = 3,
                            Name = "Sean Bean"
                        },
                        new
                        {
                            PersonId = 4,
                            Name = "Chuck Russell"
                        },
                        new
                        {
                            PersonId = 5,
                            Name = "Jim Carrey"
                        },
                        new
                        {
                            PersonId = 6,
                            Name = "Peter Riegert"
                        },
                        new
                        {
                            PersonId = 7,
                            Name = "Frank Darabont"
                        },
                        new
                        {
                            PersonId = 8,
                            Name = "Tim Robbins"
                        },
                        new
                        {
                            PersonId = 9,
                            Name = "Morgan Freeman"
                        },
                        new
                        {
                            PersonId = 10,
                            Name = "Luc Besson"
                        },
                        new
                        {
                            PersonId = 11,
                            Name = "Natalie Portman"
                        },
                        new
                        {
                            PersonId = 12,
                            Name = "Jean Reno"
                        },
                        new
                        {
                            PersonId = 13,
                            Name = "Paul McGuigan"
                        },
                        new
                        {
                            PersonId = 14,
                            Name = "Benedict Cumberbatch"
                        },
                        new
                        {
                            PersonId = 15,
                            Name = "Martin Freeman"
                        },
                        new
                        {
                            PersonId = 16,
                            Name = "Olivier Nakache"
                        },
                        new
                        {
                            PersonId = 17,
                            Name = "François Cluzet"
                        },
                        new
                        {
                            PersonId = 18,
                            Name = "Omar Sy"
                        },
                        new
                        {
                            PersonId = 19,
                            Name = "Robert Zemeckis"
                        },
                        new
                        {
                            PersonId = 20,
                            Name = "Michael J. Fox"
                        },
                        new
                        {
                            PersonId = 21,
                            Name = "Christopher Lloyd"
                        });
                });

            modelBuilder.Entity("DotnetMoviesAppRazor.Data.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AuthorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Body")
                        .HasColumnType("TEXT");

                    b.Property<int>("FilmId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("FilmId");

                    b.ToTable("FilmReviews");
                });

            modelBuilder.Entity("DotnetMoviesAppRazor.Data.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("FilmPerson", b =>
                {
                    b.Property<int>("ActoredFilmsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActorsPersonId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ActoredFilmsId", "ActorsPersonId");

                    b.HasIndex("ActorsPersonId");

                    b.ToTable("FilmPerson");

                    b.HasData(
                        new
                        {
                            ActoredFilmsId = 1,
                            ActorsPersonId = 2
                        },
                        new
                        {
                            ActoredFilmsId = 1,
                            ActorsPersonId = 3
                        },
                        new
                        {
                            ActoredFilmsId = 2,
                            ActorsPersonId = 5
                        },
                        new
                        {
                            ActoredFilmsId = 2,
                            ActorsPersonId = 6
                        },
                        new
                        {
                            ActoredFilmsId = 3,
                            ActorsPersonId = 8
                        },
                        new
                        {
                            ActoredFilmsId = 3,
                            ActorsPersonId = 9
                        },
                        new
                        {
                            ActoredFilmsId = 4,
                            ActorsPersonId = 11
                        },
                        new
                        {
                            ActoredFilmsId = 4,
                            ActorsPersonId = 12
                        },
                        new
                        {
                            ActoredFilmsId = 5,
                            ActorsPersonId = 14
                        },
                        new
                        {
                            ActoredFilmsId = 5,
                            ActorsPersonId = 15
                        },
                        new
                        {
                            ActoredFilmsId = 6,
                            ActorsPersonId = 17
                        },
                        new
                        {
                            ActoredFilmsId = 6,
                            ActorsPersonId = 18
                        },
                        new
                        {
                            ActoredFilmsId = 7,
                            ActorsPersonId = 20
                        },
                        new
                        {
                            ActoredFilmsId = 7,
                            ActorsPersonId = 21
                        });
                });

            modelBuilder.Entity("FilmPerson1", b =>
                {
                    b.Property<int>("DirectoredFilmsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DirectorsPersonId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DirectoredFilmsId", "DirectorsPersonId");

                    b.HasIndex("DirectorsPersonId");

                    b.ToTable("FilmPerson1");

                    b.HasData(
                        new
                        {
                            DirectoredFilmsId = 1,
                            DirectorsPersonId = 1
                        },
                        new
                        {
                            DirectoredFilmsId = 2,
                            DirectorsPersonId = 4
                        },
                        new
                        {
                            DirectoredFilmsId = 3,
                            DirectorsPersonId = 7
                        },
                        new
                        {
                            DirectoredFilmsId = 4,
                            DirectorsPersonId = 10
                        },
                        new
                        {
                            DirectoredFilmsId = 5,
                            DirectorsPersonId = 13
                        },
                        new
                        {
                            DirectoredFilmsId = 6,
                            DirectorsPersonId = 16
                        },
                        new
                        {
                            DirectoredFilmsId = 7,
                            DirectorsPersonId = 19
                        });
                });

            modelBuilder.Entity("FilmUser", b =>
                {
                    b.Property<int>("FavouriteFilmsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FavouriteOfUsersId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FavouriteFilmsId", "FavouriteOfUsersId");

                    b.HasIndex("FavouriteOfUsersId");

                    b.ToTable("FilmUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DotnetMoviesAppRazor.Data.Review", b =>
                {
                    b.HasOne("DotnetMoviesAppRazor.Data.User", "Author")
                        .WithMany("Reviews")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DotnetMoviesAppRazor.Data.Film", "Film")
                        .WithMany("Reviews")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Film");
                });

            modelBuilder.Entity("FilmPerson", b =>
                {
                    b.HasOne("DotnetMoviesAppRazor.Data.Film", null)
                        .WithMany()
                        .HasForeignKey("ActoredFilmsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DotnetMoviesAppRazor.Data.Person", null)
                        .WithMany()
                        .HasForeignKey("ActorsPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FilmPerson1", b =>
                {
                    b.HasOne("DotnetMoviesAppRazor.Data.Film", null)
                        .WithMany()
                        .HasForeignKey("DirectoredFilmsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DotnetMoviesAppRazor.Data.Person", null)
                        .WithMany()
                        .HasForeignKey("DirectorsPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FilmUser", b =>
                {
                    b.HasOne("DotnetMoviesAppRazor.Data.Film", null)
                        .WithMany()
                        .HasForeignKey("FavouriteFilmsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DotnetMoviesAppRazor.Data.User", null)
                        .WithMany()
                        .HasForeignKey("FavouriteOfUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("DotnetMoviesAppRazor.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("DotnetMoviesAppRazor.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DotnetMoviesAppRazor.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("DotnetMoviesAppRazor.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DotnetMoviesAppRazor.Data.Film", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("DotnetMoviesAppRazor.Data.User", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
